import axios from "axios";
import Head from "next/head";
import { GetStaticPaths, GetStaticProps, NextPage } from "next/types";
import LayoutDefault from "../../../components/layouts/LayoutDefault";
import PeopleListTemplate from "../../../components/templates/CharactersListTemplate";

interface PeopleListPageProps {
  charactersData: Character[];
  pagesCount: number;
  pageCurrent: number | null;
}

const baseCharactersUrl = "https://swapi.dev/api/people";

const calcAvailablePage = ({
  entitiesCount,
  pageLength,
}: {
  entitiesCount: number | undefined;
  pageLength: number | undefined;
}) => (entitiesCount && pageLength ? Math.ceil(entitiesCount / pageLength) : 0);

const CharactersListPage: NextPage<PeopleListPageProps> = ({
  charactersData,
  pagesCount,
  pageCurrent,
}) => {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <LayoutDefault>
          <PeopleListTemplate
            characters={charactersData}
            pagesCount={pagesCount}
            pageCurrent={pageCurrent}
          />
        </LayoutDefault>
      </main>
    </div>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  // step 1: get total count and page res length from res
  try {
    const { data }: { data: CharactersApiResponse } = await axios.get(
      baseCharactersUrl
    );

    // step 1: using total count and page res length from res calc available pages
    // this can be a little bit risky if data is changing frequently
    // as page count can change not only page content
    const availablePagesCount = Math.ceil(data?.count / data?.results?.length);

    const paths = Array.from(
      { length: availablePagesCount },
      (_, i) => i + 1
    ).map((page) => ({
      params: { page: page.toString() },
    }));

    return {
      paths,
      fallback: false,
    };
  } catch (error) {
    return { paths: [], fallback: false };
  }
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  try {
    const { data: charactersInitialData } = await axios.get(
      `${baseCharactersUrl}`
    );

    const availablePagesCount = calcAvailablePage({
      entitiesCount: charactersInitialData.count,
      pageLength: charactersInitialData.results?.length,
    });

    const { data: charatersPageData } = await axios.get(
      `${baseCharactersUrl}/?page=${params?.page}`
    );

    console.log("b", charatersPageData);

    console.log("a", charactersInitialData);

    return {
      props: {
        charactersData: charatersPageData.results || [],
        pagesCount: availablePagesCount,
        pageCurrent: params?.page ? +params.page : null,
      },
      revalidate: 10,
    };
  } catch (error) {
    return {
      redirect: {
        destination: "/404",
        permanent: false,
      },
    };
  }
};

export default CharactersListPage;
